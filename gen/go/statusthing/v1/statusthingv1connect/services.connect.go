// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: statusthing/v1/services.proto

package statusthingv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/lusis/statusthing/gen/go/statusthing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ItemsServiceName is the fully-qualified name of the ItemsService service.
	ItemsServiceName = "statusthing.v1.ItemsService"
	// StatusServiceName is the fully-qualified name of the StatusService service.
	StatusServiceName = "statusthing.v1.StatusService"
	// NotesServiceName is the fully-qualified name of the NotesService service.
	NotesServiceName = "statusthing.v1.NotesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ItemsServiceGetItemProcedure is the fully-qualified name of the ItemsService's GetItem RPC.
	ItemsServiceGetItemProcedure = "/statusthing.v1.ItemsService/GetItem"
	// ItemsServiceListItemsProcedure is the fully-qualified name of the ItemsService's ListItems RPC.
	ItemsServiceListItemsProcedure = "/statusthing.v1.ItemsService/ListItems"
	// ItemsServiceAddItemProcedure is the fully-qualified name of the ItemsService's AddItem RPC.
	ItemsServiceAddItemProcedure = "/statusthing.v1.ItemsService/AddItem"
	// ItemsServiceUpdateItemProcedure is the fully-qualified name of the ItemsService's UpdateItem RPC.
	ItemsServiceUpdateItemProcedure = "/statusthing.v1.ItemsService/UpdateItem"
	// ItemsServiceDeleteItemProcedure is the fully-qualified name of the ItemsService's DeleteItem RPC.
	ItemsServiceDeleteItemProcedure = "/statusthing.v1.ItemsService/DeleteItem"
	// StatusServiceGetStatusProcedure is the fully-qualified name of the StatusService's GetStatus RPC.
	StatusServiceGetStatusProcedure = "/statusthing.v1.StatusService/GetStatus"
	// StatusServiceListStatusProcedure is the fully-qualified name of the StatusService's ListStatus
	// RPC.
	StatusServiceListStatusProcedure = "/statusthing.v1.StatusService/ListStatus"
	// StatusServiceAddStatusProcedure is the fully-qualified name of the StatusService's AddStatus RPC.
	StatusServiceAddStatusProcedure = "/statusthing.v1.StatusService/AddStatus"
	// StatusServiceUpdateStatusProcedure is the fully-qualified name of the StatusService's
	// UpdateStatus RPC.
	StatusServiceUpdateStatusProcedure = "/statusthing.v1.StatusService/UpdateStatus"
	// StatusServiceDeleteStatusProcedure is the fully-qualified name of the StatusService's
	// DeleteStatus RPC.
	StatusServiceDeleteStatusProcedure = "/statusthing.v1.StatusService/DeleteStatus"
	// NotesServiceGetNoteProcedure is the fully-qualified name of the NotesService's GetNote RPC.
	NotesServiceGetNoteProcedure = "/statusthing.v1.NotesService/GetNote"
	// NotesServiceListNotesProcedure is the fully-qualified name of the NotesService's ListNotes RPC.
	NotesServiceListNotesProcedure = "/statusthing.v1.NotesService/ListNotes"
	// NotesServiceAddNoteProcedure is the fully-qualified name of the NotesService's AddNote RPC.
	NotesServiceAddNoteProcedure = "/statusthing.v1.NotesService/AddNote"
	// NotesServiceUpdateNoteProcedure is the fully-qualified name of the NotesService's UpdateNote RPC.
	NotesServiceUpdateNoteProcedure = "/statusthing.v1.NotesService/UpdateNote"
	// NotesServiceDeleteNoteProcedure is the fully-qualified name of the NotesService's DeleteNote RPC.
	NotesServiceDeleteNoteProcedure = "/statusthing.v1.NotesService/DeleteNote"
)

// ItemsServiceClient is a client for the statusthing.v1.ItemsService service.
type ItemsServiceClient interface {
	// GetItem gets an Item by its Id
	GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error)
	// ListItems gets all known Items
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
	// AddItem adds a new Item
	AddItem(context.Context, *connect_go.Request[v1.AddItemRequest]) (*connect_go.Response[v1.AddItemResponse], error)
	// UpdateItem updates an existing Item
	UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error)
	// DeleteItem deletes an exisiting Item
	DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error)
}

// NewItemsServiceClient constructs a client for the statusthing.v1.ItemsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewItemsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ItemsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &itemsServiceClient{
		getItem: connect_go.NewClient[v1.GetItemRequest, v1.GetItemResponse](
			httpClient,
			baseURL+ItemsServiceGetItemProcedure,
			opts...,
		),
		listItems: connect_go.NewClient[v1.ListItemsRequest, v1.ListItemsResponse](
			httpClient,
			baseURL+ItemsServiceListItemsProcedure,
			opts...,
		),
		addItem: connect_go.NewClient[v1.AddItemRequest, v1.AddItemResponse](
			httpClient,
			baseURL+ItemsServiceAddItemProcedure,
			opts...,
		),
		updateItem: connect_go.NewClient[v1.UpdateItemRequest, v1.UpdateItemResponse](
			httpClient,
			baseURL+ItemsServiceUpdateItemProcedure,
			opts...,
		),
		deleteItem: connect_go.NewClient[v1.DeleteItemRequest, v1.DeleteItemResponse](
			httpClient,
			baseURL+ItemsServiceDeleteItemProcedure,
			opts...,
		),
	}
}

// itemsServiceClient implements ItemsServiceClient.
type itemsServiceClient struct {
	getItem    *connect_go.Client[v1.GetItemRequest, v1.GetItemResponse]
	listItems  *connect_go.Client[v1.ListItemsRequest, v1.ListItemsResponse]
	addItem    *connect_go.Client[v1.AddItemRequest, v1.AddItemResponse]
	updateItem *connect_go.Client[v1.UpdateItemRequest, v1.UpdateItemResponse]
	deleteItem *connect_go.Client[v1.DeleteItemRequest, v1.DeleteItemResponse]
}

// GetItem calls statusthing.v1.ItemsService.GetItem.
func (c *itemsServiceClient) GetItem(ctx context.Context, req *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// ListItems calls statusthing.v1.ItemsService.ListItems.
func (c *itemsServiceClient) ListItems(ctx context.Context, req *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return c.listItems.CallUnary(ctx, req)
}

// AddItem calls statusthing.v1.ItemsService.AddItem.
func (c *itemsServiceClient) AddItem(ctx context.Context, req *connect_go.Request[v1.AddItemRequest]) (*connect_go.Response[v1.AddItemResponse], error) {
	return c.addItem.CallUnary(ctx, req)
}

// UpdateItem calls statusthing.v1.ItemsService.UpdateItem.
func (c *itemsServiceClient) UpdateItem(ctx context.Context, req *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error) {
	return c.updateItem.CallUnary(ctx, req)
}

// DeleteItem calls statusthing.v1.ItemsService.DeleteItem.
func (c *itemsServiceClient) DeleteItem(ctx context.Context, req *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error) {
	return c.deleteItem.CallUnary(ctx, req)
}

// ItemsServiceHandler is an implementation of the statusthing.v1.ItemsService service.
type ItemsServiceHandler interface {
	// GetItem gets an Item by its Id
	GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error)
	// ListItems gets all known Items
	ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error)
	// AddItem adds a new Item
	AddItem(context.Context, *connect_go.Request[v1.AddItemRequest]) (*connect_go.Response[v1.AddItemResponse], error)
	// UpdateItem updates an existing Item
	UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error)
	// DeleteItem deletes an exisiting Item
	DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error)
}

// NewItemsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewItemsServiceHandler(svc ItemsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ItemsServiceGetItemProcedure, connect_go.NewUnaryHandler(
		ItemsServiceGetItemProcedure,
		svc.GetItem,
		opts...,
	))
	mux.Handle(ItemsServiceListItemsProcedure, connect_go.NewUnaryHandler(
		ItemsServiceListItemsProcedure,
		svc.ListItems,
		opts...,
	))
	mux.Handle(ItemsServiceAddItemProcedure, connect_go.NewUnaryHandler(
		ItemsServiceAddItemProcedure,
		svc.AddItem,
		opts...,
	))
	mux.Handle(ItemsServiceUpdateItemProcedure, connect_go.NewUnaryHandler(
		ItemsServiceUpdateItemProcedure,
		svc.UpdateItem,
		opts...,
	))
	mux.Handle(ItemsServiceDeleteItemProcedure, connect_go.NewUnaryHandler(
		ItemsServiceDeleteItemProcedure,
		svc.DeleteItem,
		opts...,
	))
	return "/statusthing.v1.ItemsService/", mux
}

// UnimplementedItemsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedItemsServiceHandler struct{}

func (UnimplementedItemsServiceHandler) GetItem(context.Context, *connect_go.Request[v1.GetItemRequest]) (*connect_go.Response[v1.GetItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.ItemsService.GetItem is not implemented"))
}

func (UnimplementedItemsServiceHandler) ListItems(context.Context, *connect_go.Request[v1.ListItemsRequest]) (*connect_go.Response[v1.ListItemsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.ItemsService.ListItems is not implemented"))
}

func (UnimplementedItemsServiceHandler) AddItem(context.Context, *connect_go.Request[v1.AddItemRequest]) (*connect_go.Response[v1.AddItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.ItemsService.AddItem is not implemented"))
}

func (UnimplementedItemsServiceHandler) UpdateItem(context.Context, *connect_go.Request[v1.UpdateItemRequest]) (*connect_go.Response[v1.UpdateItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.ItemsService.UpdateItem is not implemented"))
}

func (UnimplementedItemsServiceHandler) DeleteItem(context.Context, *connect_go.Request[v1.DeleteItemRequest]) (*connect_go.Response[v1.DeleteItemResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.ItemsService.DeleteItem is not implemented"))
}

// StatusServiceClient is a client for the statusthing.v1.StatusService service.
type StatusServiceClient interface {
	// GetStatus gets a Status by its Id
	GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error)
	// ListStatus gets all known Status
	ListStatus(context.Context, *connect_go.Request[v1.ListStatusRequest]) (*connect_go.Response[v1.ListStatusResponse], error)
	// AddStatus adds a new status
	AddStatus(context.Context, *connect_go.Request[v1.AddStatusRequest]) (*connect_go.Response[v1.AddStatusResponse], error)
	// UpdateStatus updates an existing status
	UpdateStatus(context.Context, *connect_go.Request[v1.UpdateStatusRequest]) (*connect_go.Response[v1.UpdateStatusResponse], error)
	// DeleteStatus deletes a Status
	DeleteStatus(context.Context, *connect_go.Request[v1.DeleteStatusRequest]) (*connect_go.Response[v1.DeleteStatusResponse], error)
}

// NewStatusServiceClient constructs a client for the statusthing.v1.StatusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStatusServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) StatusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &statusServiceClient{
		getStatus: connect_go.NewClient[v1.GetStatusRequest, v1.GetStatusResponse](
			httpClient,
			baseURL+StatusServiceGetStatusProcedure,
			opts...,
		),
		listStatus: connect_go.NewClient[v1.ListStatusRequest, v1.ListStatusResponse](
			httpClient,
			baseURL+StatusServiceListStatusProcedure,
			opts...,
		),
		addStatus: connect_go.NewClient[v1.AddStatusRequest, v1.AddStatusResponse](
			httpClient,
			baseURL+StatusServiceAddStatusProcedure,
			opts...,
		),
		updateStatus: connect_go.NewClient[v1.UpdateStatusRequest, v1.UpdateStatusResponse](
			httpClient,
			baseURL+StatusServiceUpdateStatusProcedure,
			opts...,
		),
		deleteStatus: connect_go.NewClient[v1.DeleteStatusRequest, v1.DeleteStatusResponse](
			httpClient,
			baseURL+StatusServiceDeleteStatusProcedure,
			opts...,
		),
	}
}

// statusServiceClient implements StatusServiceClient.
type statusServiceClient struct {
	getStatus    *connect_go.Client[v1.GetStatusRequest, v1.GetStatusResponse]
	listStatus   *connect_go.Client[v1.ListStatusRequest, v1.ListStatusResponse]
	addStatus    *connect_go.Client[v1.AddStatusRequest, v1.AddStatusResponse]
	updateStatus *connect_go.Client[v1.UpdateStatusRequest, v1.UpdateStatusResponse]
	deleteStatus *connect_go.Client[v1.DeleteStatusRequest, v1.DeleteStatusResponse]
}

// GetStatus calls statusthing.v1.StatusService.GetStatus.
func (c *statusServiceClient) GetStatus(ctx context.Context, req *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// ListStatus calls statusthing.v1.StatusService.ListStatus.
func (c *statusServiceClient) ListStatus(ctx context.Context, req *connect_go.Request[v1.ListStatusRequest]) (*connect_go.Response[v1.ListStatusResponse], error) {
	return c.listStatus.CallUnary(ctx, req)
}

// AddStatus calls statusthing.v1.StatusService.AddStatus.
func (c *statusServiceClient) AddStatus(ctx context.Context, req *connect_go.Request[v1.AddStatusRequest]) (*connect_go.Response[v1.AddStatusResponse], error) {
	return c.addStatus.CallUnary(ctx, req)
}

// UpdateStatus calls statusthing.v1.StatusService.UpdateStatus.
func (c *statusServiceClient) UpdateStatus(ctx context.Context, req *connect_go.Request[v1.UpdateStatusRequest]) (*connect_go.Response[v1.UpdateStatusResponse], error) {
	return c.updateStatus.CallUnary(ctx, req)
}

// DeleteStatus calls statusthing.v1.StatusService.DeleteStatus.
func (c *statusServiceClient) DeleteStatus(ctx context.Context, req *connect_go.Request[v1.DeleteStatusRequest]) (*connect_go.Response[v1.DeleteStatusResponse], error) {
	return c.deleteStatus.CallUnary(ctx, req)
}

// StatusServiceHandler is an implementation of the statusthing.v1.StatusService service.
type StatusServiceHandler interface {
	// GetStatus gets a Status by its Id
	GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error)
	// ListStatus gets all known Status
	ListStatus(context.Context, *connect_go.Request[v1.ListStatusRequest]) (*connect_go.Response[v1.ListStatusResponse], error)
	// AddStatus adds a new status
	AddStatus(context.Context, *connect_go.Request[v1.AddStatusRequest]) (*connect_go.Response[v1.AddStatusResponse], error)
	// UpdateStatus updates an existing status
	UpdateStatus(context.Context, *connect_go.Request[v1.UpdateStatusRequest]) (*connect_go.Response[v1.UpdateStatusResponse], error)
	// DeleteStatus deletes a Status
	DeleteStatus(context.Context, *connect_go.Request[v1.DeleteStatusRequest]) (*connect_go.Response[v1.DeleteStatusResponse], error)
}

// NewStatusServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStatusServiceHandler(svc StatusServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(StatusServiceGetStatusProcedure, connect_go.NewUnaryHandler(
		StatusServiceGetStatusProcedure,
		svc.GetStatus,
		opts...,
	))
	mux.Handle(StatusServiceListStatusProcedure, connect_go.NewUnaryHandler(
		StatusServiceListStatusProcedure,
		svc.ListStatus,
		opts...,
	))
	mux.Handle(StatusServiceAddStatusProcedure, connect_go.NewUnaryHandler(
		StatusServiceAddStatusProcedure,
		svc.AddStatus,
		opts...,
	))
	mux.Handle(StatusServiceUpdateStatusProcedure, connect_go.NewUnaryHandler(
		StatusServiceUpdateStatusProcedure,
		svc.UpdateStatus,
		opts...,
	))
	mux.Handle(StatusServiceDeleteStatusProcedure, connect_go.NewUnaryHandler(
		StatusServiceDeleteStatusProcedure,
		svc.DeleteStatus,
		opts...,
	))
	return "/statusthing.v1.StatusService/", mux
}

// UnimplementedStatusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStatusServiceHandler struct{}

func (UnimplementedStatusServiceHandler) GetStatus(context.Context, *connect_go.Request[v1.GetStatusRequest]) (*connect_go.Response[v1.GetStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.StatusService.GetStatus is not implemented"))
}

func (UnimplementedStatusServiceHandler) ListStatus(context.Context, *connect_go.Request[v1.ListStatusRequest]) (*connect_go.Response[v1.ListStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.StatusService.ListStatus is not implemented"))
}

func (UnimplementedStatusServiceHandler) AddStatus(context.Context, *connect_go.Request[v1.AddStatusRequest]) (*connect_go.Response[v1.AddStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.StatusService.AddStatus is not implemented"))
}

func (UnimplementedStatusServiceHandler) UpdateStatus(context.Context, *connect_go.Request[v1.UpdateStatusRequest]) (*connect_go.Response[v1.UpdateStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.StatusService.UpdateStatus is not implemented"))
}

func (UnimplementedStatusServiceHandler) DeleteStatus(context.Context, *connect_go.Request[v1.DeleteStatusRequest]) (*connect_go.Response[v1.DeleteStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.StatusService.DeleteStatus is not implemented"))
}

// NotesServiceClient is a client for the statusthing.v1.NotesService service.
type NotesServiceClient interface {
	// GetNote gets a Note by its Id
	GetNote(context.Context, *connect_go.Request[v1.GetNoteRequest]) (*connect_go.Response[v1.GetNoteResponse], error)
	// ListNotes gets all Note for an Item
	ListNotes(context.Context, *connect_go.Request[v1.ListNotesRequest]) (*connect_go.Response[v1.ListNotesResponse], error)
	// AddNote adds a Note to an Item
	AddNote(context.Context, *connect_go.Request[v1.AddNoteRequest]) (*connect_go.Response[v1.AddNoteResponse], error)
	// UpdateNote updates an existing Note
	UpdateNote(context.Context, *connect_go.Request[v1.UpdateNoteRequest]) (*connect_go.Response[v1.UpdateNoteResponse], error)
	// DeleteNote deletes a Note from an Item
	DeleteNote(context.Context, *connect_go.Request[v1.DeleteNoteRequest]) (*connect_go.Response[v1.DeleteNoteResponse], error)
}

// NewNotesServiceClient constructs a client for the statusthing.v1.NotesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notesServiceClient{
		getNote: connect_go.NewClient[v1.GetNoteRequest, v1.GetNoteResponse](
			httpClient,
			baseURL+NotesServiceGetNoteProcedure,
			opts...,
		),
		listNotes: connect_go.NewClient[v1.ListNotesRequest, v1.ListNotesResponse](
			httpClient,
			baseURL+NotesServiceListNotesProcedure,
			opts...,
		),
		addNote: connect_go.NewClient[v1.AddNoteRequest, v1.AddNoteResponse](
			httpClient,
			baseURL+NotesServiceAddNoteProcedure,
			opts...,
		),
		updateNote: connect_go.NewClient[v1.UpdateNoteRequest, v1.UpdateNoteResponse](
			httpClient,
			baseURL+NotesServiceUpdateNoteProcedure,
			opts...,
		),
		deleteNote: connect_go.NewClient[v1.DeleteNoteRequest, v1.DeleteNoteResponse](
			httpClient,
			baseURL+NotesServiceDeleteNoteProcedure,
			opts...,
		),
	}
}

// notesServiceClient implements NotesServiceClient.
type notesServiceClient struct {
	getNote    *connect_go.Client[v1.GetNoteRequest, v1.GetNoteResponse]
	listNotes  *connect_go.Client[v1.ListNotesRequest, v1.ListNotesResponse]
	addNote    *connect_go.Client[v1.AddNoteRequest, v1.AddNoteResponse]
	updateNote *connect_go.Client[v1.UpdateNoteRequest, v1.UpdateNoteResponse]
	deleteNote *connect_go.Client[v1.DeleteNoteRequest, v1.DeleteNoteResponse]
}

// GetNote calls statusthing.v1.NotesService.GetNote.
func (c *notesServiceClient) GetNote(ctx context.Context, req *connect_go.Request[v1.GetNoteRequest]) (*connect_go.Response[v1.GetNoteResponse], error) {
	return c.getNote.CallUnary(ctx, req)
}

// ListNotes calls statusthing.v1.NotesService.ListNotes.
func (c *notesServiceClient) ListNotes(ctx context.Context, req *connect_go.Request[v1.ListNotesRequest]) (*connect_go.Response[v1.ListNotesResponse], error) {
	return c.listNotes.CallUnary(ctx, req)
}

// AddNote calls statusthing.v1.NotesService.AddNote.
func (c *notesServiceClient) AddNote(ctx context.Context, req *connect_go.Request[v1.AddNoteRequest]) (*connect_go.Response[v1.AddNoteResponse], error) {
	return c.addNote.CallUnary(ctx, req)
}

// UpdateNote calls statusthing.v1.NotesService.UpdateNote.
func (c *notesServiceClient) UpdateNote(ctx context.Context, req *connect_go.Request[v1.UpdateNoteRequest]) (*connect_go.Response[v1.UpdateNoteResponse], error) {
	return c.updateNote.CallUnary(ctx, req)
}

// DeleteNote calls statusthing.v1.NotesService.DeleteNote.
func (c *notesServiceClient) DeleteNote(ctx context.Context, req *connect_go.Request[v1.DeleteNoteRequest]) (*connect_go.Response[v1.DeleteNoteResponse], error) {
	return c.deleteNote.CallUnary(ctx, req)
}

// NotesServiceHandler is an implementation of the statusthing.v1.NotesService service.
type NotesServiceHandler interface {
	// GetNote gets a Note by its Id
	GetNote(context.Context, *connect_go.Request[v1.GetNoteRequest]) (*connect_go.Response[v1.GetNoteResponse], error)
	// ListNotes gets all Note for an Item
	ListNotes(context.Context, *connect_go.Request[v1.ListNotesRequest]) (*connect_go.Response[v1.ListNotesResponse], error)
	// AddNote adds a Note to an Item
	AddNote(context.Context, *connect_go.Request[v1.AddNoteRequest]) (*connect_go.Response[v1.AddNoteResponse], error)
	// UpdateNote updates an existing Note
	UpdateNote(context.Context, *connect_go.Request[v1.UpdateNoteRequest]) (*connect_go.Response[v1.UpdateNoteResponse], error)
	// DeleteNote deletes a Note from an Item
	DeleteNote(context.Context, *connect_go.Request[v1.DeleteNoteRequest]) (*connect_go.Response[v1.DeleteNoteResponse], error)
}

// NewNotesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotesServiceHandler(svc NotesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(NotesServiceGetNoteProcedure, connect_go.NewUnaryHandler(
		NotesServiceGetNoteProcedure,
		svc.GetNote,
		opts...,
	))
	mux.Handle(NotesServiceListNotesProcedure, connect_go.NewUnaryHandler(
		NotesServiceListNotesProcedure,
		svc.ListNotes,
		opts...,
	))
	mux.Handle(NotesServiceAddNoteProcedure, connect_go.NewUnaryHandler(
		NotesServiceAddNoteProcedure,
		svc.AddNote,
		opts...,
	))
	mux.Handle(NotesServiceUpdateNoteProcedure, connect_go.NewUnaryHandler(
		NotesServiceUpdateNoteProcedure,
		svc.UpdateNote,
		opts...,
	))
	mux.Handle(NotesServiceDeleteNoteProcedure, connect_go.NewUnaryHandler(
		NotesServiceDeleteNoteProcedure,
		svc.DeleteNote,
		opts...,
	))
	return "/statusthing.v1.NotesService/", mux
}

// UnimplementedNotesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotesServiceHandler struct{}

func (UnimplementedNotesServiceHandler) GetNote(context.Context, *connect_go.Request[v1.GetNoteRequest]) (*connect_go.Response[v1.GetNoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.NotesService.GetNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) ListNotes(context.Context, *connect_go.Request[v1.ListNotesRequest]) (*connect_go.Response[v1.ListNotesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.NotesService.ListNotes is not implemented"))
}

func (UnimplementedNotesServiceHandler) AddNote(context.Context, *connect_go.Request[v1.AddNoteRequest]) (*connect_go.Response[v1.AddNoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.NotesService.AddNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) UpdateNote(context.Context, *connect_go.Request[v1.UpdateNoteRequest]) (*connect_go.Response[v1.UpdateNoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.NotesService.UpdateNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) DeleteNote(context.Context, *connect_go.Request[v1.DeleteNoteRequest]) (*connect_go.Response[v1.DeleteNoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("statusthing.v1.NotesService.DeleteNote is not implemented"))
}
